user@user-VirtualBox:~/diploma/cloud-terraform/example-tfc-getting-started$ terraform apply
Running apply in Terraform Cloud. Output will stream here. Pressing Ctrl-C
will cancel the remote apply if it's still pending. If the apply started it
will stop streaming the logs, but will not stop the apply running remotely.

Preparing the remote apply...

To view this run in a browser, visit:
https://app.terraform.io/app/example-org-f099c2/stage/runs/run-KKwsK8AwGT8Utt7i

Waiting for the plan to start...

Terraform v1.4.6
on linux_amd64
Initializing plugins and modules...

Terraform used the selected providers to generate the following execution plan. Resource actions are
indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # yandex_compute_image.image will be created
  + resource "yandex_compute_image" "image" {
      + created_at      = (known after apply)
      + folder_id       = (known after apply)
      + id              = (known after apply)
      + min_disk_size   = (known after apply)
      + name            = "image"
      + os_type         = (known after apply)
      + pooled          = (known after apply)
      + product_ids     = (known after apply)
      + size            = (known after apply)
      + source_disk     = (known after apply)
      + source_family   = "ubuntu-2004-lts"
      + source_image    = (known after apply)
      + source_snapshot = (known after apply)
      + source_url      = (known after apply)
      + status          = (known after apply)
    }

  # yandex_compute_instance.ntvm will be created
  + resource "yandex_compute_instance" "ntvm" {
      + allow_stopping_for_update = true
      + created_at                = (known after apply)
      + folder_id                 = (known after apply)
      + fqdn                      = (known after apply)
      + gpu_cluster_id            = (known after apply)
      + hostname                  = (known after apply)
      + id                        = (known after apply)
      + name                      = "ntvm"
      + network_acceleration_type = "standard"
      + platform_id               = "standard-v1"
      + service_account_id        = (known after apply)
      + status                    = (known after apply)
      + zone                      = "ru-central1-a"

      + boot_disk {
          + auto_delete = true
          + device_name = (known after apply)
          + disk_id     = (known after apply)
          + mode        = (known after apply)

          + initialize_params {
              + block_size  = (known after apply)
              + description = (known after apply)
              + image_id    = (known after apply)
              + name        = (known after apply)
              + size        = (known after apply)
              + snapshot_id = (known after apply)
              + type        = "network-hdd"
            }
        }

      + network_interface {
          + index              = (known after apply)
          + ip_address         = (known after apply)
          + ipv4               = true
          + ipv6               = (known after apply)
          + ipv6_address       = (known after apply)
          + mac_address        = (known after apply)
          + nat                = true
          + nat_ip_address     = (known after apply)
          + nat_ip_version     = (known after apply)
          + security_group_ids = (known after apply)
          + subnet_id          = (known after apply)
        }

      + resources {
          + core_fraction = 20
          + cores         = 2
          + memory        = 2
        }
    }

  # yandex_vpc_network.internal will be created
  + resource "yandex_vpc_network" "internal" {
      + created_at                = (known after apply)
      + default_security_group_id = (known after apply)
      + folder_id                 = (known after apply)
      + id                        = (known after apply)
      + labels                    = (known after apply)
      + name                      = "internal"
      + subnet_ids                = (known after apply)
    }

  # yandex_vpc_subnet.internal-a will be created
  + resource "yandex_vpc_subnet" "internal-a" {
      + created_at     = (known after apply)
      + folder_id      = (known after apply)
      + id             = (known after apply)
      + labels         = (known after apply)
      + name           = "internal-a"
      + network_id     = (known after apply)
      + v4_cidr_blocks = [
          + "10.0.0.0/24",
        ]
      + v6_cidr_blocks = (known after apply)
      + zone           = "ru-central1-a"
    }

  # yandex_vpc_subnet.internal-b will be created
  + resource "yandex_vpc_subnet" "internal-b" {
      + created_at     = (known after apply)
      + folder_id      = (known after apply)
      + id             = (known after apply)
      + labels         = (known after apply)
      + name           = "internal-b"
      + network_id     = (known after apply)
      + v4_cidr_blocks = [
          + "10.1.0.0/24",
        ]
      + v6_cidr_blocks = (known after apply)
      + zone           = "ru-central1-b"
    }

  # yandex_vpc_subnet.internal-c will be created
  + resource "yandex_vpc_subnet" "internal-c" {
      + created_at     = (known after apply)
      + folder_id      = (known after apply)
      + id             = (known after apply)
      + labels         = (known after apply)
      + name           = "internal-c"
      + network_id     = (known after apply)
      + v4_cidr_blocks = [
          + "10.2.0.0/24",
        ]
      + v6_cidr_blocks = (known after apply)
      + zone           = "ru-central1-c"
    }

Plan: 6 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Cost Estimation:

Resources: 0 of 6 estimated
           $0.0/mo +$0.0

------------------------------------------------------------------------

Do you want to perform these actions in workspace "stage"?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

yandex_compute_image.image: Creating...
yandex_vpc_network.internal: Creating...
yandex_vpc_network.internal: Creation complete after 3s [id=enp4lhgbb72spmestonn]
yandex_vpc_subnet.internal-a: Creating...
yandex_vpc_subnet.internal-c: Creating...
yandex_vpc_subnet.internal-b: Creating...
yandex_vpc_subnet.internal-a: Creation complete after 1s [id=e9b1mlc7l54srtqf264e]
yandex_vpc_subnet.internal-b: Creation complete after 1s [id=e2li2hqfb8icb9r1g5mr]
yandex_vpc_subnet.internal-c: Creation complete after 2s [id=b0c3hu65hkhgbtnchdtb]
yandex_compute_image.image: Still creating... [10s elapsed]
yandex_compute_image.image: Creation complete after 11s [id=fd86h97j4fo9n61l643m]
yandex_compute_instance.ntvm: Creating...
yandex_compute_instance.ntvm: Still creating... [10s elapsed]
yandex_compute_instance.ntvm: Still creating... [20s elapsed]
yandex_compute_instance.ntvm: Still creating... [30s elapsed]
yandex_compute_instance.ntvm: Still creating... [40s elapsed]
yandex_compute_instance.ntvm: Still creating... [50s elapsed]
yandex_compute_instance.ntvm: Creation complete after 59s [id=fhm88067p0pm1hj20dhs]

Apply complete! Resources: 6 added, 0 changed, 0 destroyed.

