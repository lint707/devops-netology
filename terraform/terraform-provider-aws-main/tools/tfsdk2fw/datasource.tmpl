// Code generated by tools/tfsdk2fw/main.go. Manual editing is required.

package {{ .PackageName }}

import (
    "context"

    "github.com/hashicorp/terraform-plugin-framework/datasource"
    "github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
    "github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

func init() {
    registerDataSourceTypeFactory("{{ .TFTypeName }}", newDataSource{{ .Name }}Type)
}

// newDataSource{{ .Name }}Type instantiates a new DataSourceType for the {{ .TFTypeName }} data source.
func newDataSource{{ .Name }}Type(ctx context.Context) (provider.DataSourceType, error) {
	return &dataSource{{ .Name }}Type{}, nil
}

type dataSource{{ .Name }}Type struct {}

// GetSchema returns the schema for this data source.
func (t *dataSource{{ .Name }}Type) GetSchema(context.Context) (tfsdk.Schema, diag.Diagnostics) {
    schema := {{ .Schema }}

    return schema, nil
}

// NewDataSource instantiates a new DataSource of this DataSourceType.
func (t *dataSource{{ .Name }}Type) NewDataSource(ctx context.Context, provider provider.Provider) (provider.DataSource, diag.Diagnostics) {
    return &dataSource{{ .Name }}{}, nil
}

type dataSource{{ .Name }} struct {}

// Read is called when the provider must read data source values in order to update state.
// Config values should be read from the ReadRequest and new state values set on the ReadResponse.
func (d *dataSource{{ .Name }}) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
    tflog.Trace(ctx, "dataSource{{ .Name }}.Read enter")
}